// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/deepakkamesh/go-serial/serial (interfaces: SerialPort)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSerialPort is a mock of SerialPort interface
type MockSerialPort struct {
	ctrl     *gomock.Controller
	recorder *MockSerialPortMockRecorder
}

// MockSerialPortMockRecorder is the mock recorder for MockSerialPort
type MockSerialPortMockRecorder struct {
	mock *MockSerialPort
}

// NewMockSerialPort creates a new mock instance
func NewMockSerialPort(ctrl *gomock.Controller) *MockSerialPort {
	mock := &MockSerialPort{ctrl: ctrl}
	mock.recorder = &MockSerialPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSerialPort) EXPECT() *MockSerialPortMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSerialPort) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSerialPortMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSerialPort)(nil).Close))
}

// Read mocks base method
func (m *MockSerialPort) Read(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockSerialPortMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSerialPort)(nil).Read), arg0)
}

// SetDTR mocks base method
func (m *MockSerialPort) SetDTR(arg0 bool) error {
	ret := m.ctrl.Call(m, "SetDTR", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDTR indicates an expected call of SetDTR
func (mr *MockSerialPortMockRecorder) SetDTR(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDTR", reflect.TypeOf((*MockSerialPort)(nil).SetDTR), arg0)
}

// Write mocks base method
func (m *MockSerialPort) Write(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockSerialPortMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSerialPort)(nil).Write), arg0)
}
